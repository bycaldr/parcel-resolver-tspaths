"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const plugin_1=require("@parcel/plugin"),utils_1=require("@parcel/utils"),utils_2=require("./utils");function attemptResolve(t,e,r){if(t in e)return e.get(t);for(let r of Object.keys(e)){const i=new RegExp(`^${r.replace("*",".*")}$`,"g");if(t.match(i)){let i=e[r];switch(i.constructor){case String:return i;case Array:return attemptResolveArray(t,r,i)}}}return null}function attemptResolveArray(t,e,r){for(let i of r){let r=t.replace(utils_2.trimStar(e),utils_2.trimStar(i)),s=utils_2.path.resolve(r),n=utils_2.fs.existsSync(s);if(!n){const t=utils_2.path.basename(s),e=utils_2.path.dirname(s);s=utils_2.findFileInDirectory(e,t),s||(s=utils_2.findFileInDirectoryUnknownExt(e,t))}if(n=utils_2.fs.existsSync(s),n){if(utils_2.fs.statSync(s).isDirectory()&&(s=utils_2.findFileInDirectory(s),!s))continue;return utils_2.path.relative(".",s)}}return null}async function load(t,e,r){let i=await loadTsPaths(t,e,r);return r.verbose({message:`Typescript paths loaded: ${JSON.stringify(i)}`}),i}async function loadTsPaths(t,e,r){let i=(await utils_1.loadConfig(e,t,["tsconfig.json"])).config,s=i.baseUrl??"src",n=i?.compilerOptions?.paths??{},o=new Map;for(let[t,e]of Object.entries(n))switch(e.constructor){case String:o[t]=`${s}${utils_2.path.sep}${e}`;break;case Array:let r=e.map((t=>`${s}${utils_2.path.sep}${t}`));o[t]=r;break;default:throw new Error(`Bad path type ${e.constructor}, expected string or string[]`)}return o}function findFileInDirectory(t,e="index",r=["ts","js","tsx","jsx"]){for(let i of r){let r=exports.path.resolve(t,`${e}.${i}`);if(exports.fs.existsSync(r))return r}}function findFileInDirectoryUnknownExt(t,e){if(exports.fs.existsSync(t)){const r=exports.fs.readdirSync(t);for(let i of r)if(console.log(`${exports.path.basename(i,exports.path.extname(i))} === ${e}`),exports.path.basename(i,exports.path.extname(i))===e)return exports.path.resolve(t,i)}}function checkWebpackSpecificImportSyntax(t){if(/\S+-loader\S*!\S+/g.test(t.moduleSpecifier))throw new Error(`The import path: ${t.moduleSpecifier} is using webpack specific loader import syntax, which isn't supported by Parcel.`)}function trimStar(t){return trim(t,"*")}function trimSlash(t){return trim(t,exports.path.sep)}function trim(t,e){return t.endsWith(e)&&(t=t.substring(0,t.length-e.length)),t}exports.default=new plugin_1.Resolver({async resolve({filePath:t,dependency:e,options:r,logger:i}){utils_2.checkWebpackSpecificImportSyntax(e);let s=e.resolveFrom;if(!s?.match(/\.tsx?$/g))return null;return{filePath:attemptResolve(t,await load(s,r.inputFS,i),i)}}}),Object.defineProperty(exports,"__esModule",{value:!0}),exports.trim=exports.trimSlash=exports.trimStar=exports.checkWebpackSpecificImportSyntax=exports.findFileInDirectoryUnknownExt=exports.findFileInDirectory=exports.path=exports.fs=void 0,exports.fs=require("fs"),exports.path=require("path"),exports.findFileInDirectory=findFileInDirectory,exports.findFileInDirectoryUnknownExt=findFileInDirectoryUnknownExt,exports.checkWebpackSpecificImportSyntax=checkWebpackSpecificImportSyntax,exports.trimStar=trimStar,exports.trimSlash=trimSlash,exports.trim=trim;