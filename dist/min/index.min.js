"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.trim=exports.trimSlash=exports.trimStar=exports.checkWebpackSpecificImportSyntax=exports.findFileInDirectoryUnknownExt=exports.findFileInDirectory=exports.path=exports.fs=void 0;const plugin_1=require("@parcel/plugin"),utils_1=require("@parcel/utils");function attemptResolve(e,t,r){if(e in t)return t.get(e);for(let r of Object.keys(t)){const i=new RegExp(`^${r.replace("*",".*")}$`,"g");if(e.match(i)){let i=t[r];switch(i.constructor){case String:return i;case Array:return attemptResolveArray(e,r,i)}}}return null}function attemptResolveArray(e,t,r){for(let i of r){let r=e.replace(trimStar(t),trimStar(i)),n=exports.path.resolve(r),s=exports.fs.existsSync(n);if(!s){const e=exports.path.basename(n),t=exports.path.dirname(n);n=findFileInDirectory(t,e),n||(n=findFileInDirectoryUnknownExt(t,e))}if(s=exports.fs.existsSync(n),s){if(exports.fs.statSync(n).isDirectory()&&(n=findFileInDirectory(n),!n))continue;return exports.path.relative(".",n)}}return null}async function load(e,t,r){let i=await loadTsPaths(e,t,r);return r.verbose({message:`paths loaded: ${JSON.stringify(i)}`}),i}async function loadTsPaths(e,t,r){let i=(await utils_1.loadConfig(t,e,["tsconfig.json"])).config,n=i.baseUrl??"src",s=i?.compilerOptions?.paths??{},o=new Map;for(let[e,t]of Object.entries(s))switch(t.constructor){case String:o[e]=`${n}${exports.path.sep}${t}`;break;case Array:let r=t.map((e=>`${n}${exports.path.sep}${e}`));o[e]=r;break;default:throw new Error(`Bad path type ${t.constructor}, expected string or string[]`)}return o}function findFileInDirectory(e,t="index",r=["ts","js","tsx","jsx"]){for(let i of r){let r=exports.path.resolve(e,`${t}.${i}`);if(exports.fs.existsSync(r))return r}}function findFileInDirectoryUnknownExt(e,t){if(exports.fs.existsSync(e)){const r=exports.fs.readdirSync(e);for(let i of r)if(console.log(`${exports.path.basename(i,exports.path.extname(i))} === ${t}`),exports.path.basename(i,exports.path.extname(i))===t)return exports.path.resolve(e,i)}}function checkWebpackSpecificImportSyntax(e){if(/\S+-loader\S*!\S+/g.test(e.moduleSpecifier))throw new Error(`The import path: ${e.moduleSpecifier} is using webpack specific loader import syntax, which isn't supported by Parcel.`)}function trimStar(e){return trim(e,"*")}function trimSlash(e){return trim(e,exports.path.sep)}function trim(e,t){return e.endsWith(t)&&(e=e.substring(0,e.length-t.length)),e}exports.fs=require("fs"),exports.path=require("path"),exports.default=new plugin_1.Resolver({async resolve({filePath:e,dependency:t,options:r,logger:i}){checkWebpackSpecificImportSyntax(t);let n=t.resolveFrom;if(!n?.match(/\.tsx?$/g))return null;i.verbose({message:`Resolving ${n}`});return{filePath:attemptResolve(e,await load(n,r.inputFS,i),i)}}}),exports.findFileInDirectory=findFileInDirectory,exports.findFileInDirectoryUnknownExt=findFileInDirectoryUnknownExt,exports.checkWebpackSpecificImportSyntax=checkWebpackSpecificImportSyntax,exports.trimStar=trimStar,exports.trimSlash=trimSlash,exports.trim=trim;